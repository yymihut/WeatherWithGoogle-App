{"version":3,"sources":["Components/Header/Header.jsx","Components/MapGoogle/Map.jsx","Components/CurrentWeatherCard/CurrentWeatherCard.jsx","Components/Forecast/Forecast.jsx","Components/WeatherPage.jsx","App.js","serviceWorker.js","index.js"],"names":["header","props","className","id","name","MapContainer","handleChange","event","onchange","target","value","mapStyles","top","height","width","display","state","lat","lng","googleMapsApiKey","mapContainerStyle","this","zoom","center","defaultCenter","onClick","res","latLng","toString","replace","split","console","log","setState","parseFloat","trim","position","Component","weatherCard","timezone","umiditate","rasarit","apus","temp","presiune","forecast","key","shortid","generate","weather_description","style","background","weather_icon","clouds","humidity","sunrise","sunset","tempMin","tempMax","pressure","uvi","wind_speed","WeatherPage","componentDidUpdate","prevProps","getCurrentWeather","getForecast","timeConverter","UNIX_timestamp","a","Date","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","sec","getSeconds","timeDateMonthYearHour","timeDateMonth","timeHour","forecastCards","Fragment","map","el","idx","dt","max","weather","description","icon","data","main","sys","currentLat","currentLon","axios","get","then","response","responseF","daily","newLat","readOnly","newLng","coords","e","functionMap","App","takeCoordonatesFromMapClick","navigator","geolocation","getCurrentPosition","coordinates","latitude","longitude","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6a19a33d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst header = (props) => {\r\n    return (\r\n        <header className=\"header\" >\r\n            <p id=\"headerParagraf\">Vremea in {props.name}</p>\r\n            <div className='info'>Pt info despre vreme in alta zona faceti pe harta un click in zona respectiva</div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default header;\r\n/* border rounded shadow-lg header */","import React, { Component } from 'react';\r\nimport './Map.css';\r\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\r\n\r\nclass MapContainer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.mapStyles = {\r\n            top: \"130px\",\r\n            height: \"60vh\",\r\n            width: \"100%\",\r\n            display: \"flex\"\r\n        };\r\n        this.state = {\r\n            lat: 0,\r\n            lng: 0,\r\n        }\r\n        \r\n    }\r\n\r\n    handleChange = event => {\r\n        this.props.onchange(event.target.value)\r\n    }\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <LoadScript googleMapsApiKey='AIzaSyA_7WB0qubHUgC5vKgzaDQp5X37GM3sGhs'>\r\n                <GoogleMap\r\n                    mapContainerStyle={this.mapStyles}\r\n                    zoom={13}\r\n                    center={this.props.defaultCenter }\r\n                    onClick={event=> {\r\n                        let coords = event.latLng.toString()                                                \r\n                        let res = coords.replace(/[{()}]/g,'').split(',')\r\n                        console.log(res)\r\n                        this.setState({\r\n                            lat: parseFloat(res[0].trim()),\r\n                            lng: parseFloat(res[1].trim())\r\n                          });\r\n                          console.log('GoogleMap', this.state )\r\n                          console.log('this.props.defaultCenter', this.props.defaultCenter) \r\n                        this.props.onchange(res);\r\n                    }}\r\n                    \r\n                >\r\n                    <Marker position={this.state.lat ? this.state : this.props.defaultCenter } />\r\n                </GoogleMap>\r\n            </LoadScript>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MapContainer;","import React from 'react';\r\nimport './CurrentWeatherCard.css';\r\n\r\nconst weatherCard = (props) => {\r\n    return (        \r\n        <div className=\"cont\">\r\n            <p id=\"title\">Vremea azi {props.timezone} in {props.name} </p>\r\n            <div className=\"datas\">\r\n                <p>Umiditate : {props.umiditate} %</p>\r\n                <p>Soarele rasare : {props.rasarit} </p>\r\n                <p>Soarele apune : {props.apus} </p>\r\n                <p>Temperatura : {props.temp} grd Celsius </p>\r\n                <p>Presiune : {props.presiune} mb</p>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default weatherCard;\r\n","import React from 'react';\r\nimport './Forecast.css';\r\nimport shortid from 'shortid';\r\n\r\n\r\n\r\nconst forecast = (props) => {\r\n    \r\n    return (\r\n        <div className=\"container\" key={shortid.generate()}>\r\n            <div className=\"Card\">\r\n                <div>\r\n                    <p id=\"title\">Vremea in {props.name} </p>\r\n                    <div className=\"descriere\">\r\n                        <p >Descriere  : {props.weather_description} </p>\r\n                        <div className=\"icon\" style={{background: `url(http://openweathermap.org/img/wn/${props.weather_icon}@2x.png)`}} />\r\n                    </div>\r\n                </div>                \r\n                <div className=\"data\" >\r\n                    <p>Nori : {props.clouds} %</p>\r\n                    <p>Umiditate : {props.humidity} %</p>\r\n                    <p>Soarele rasare : {props.sunrise}  </p>\r\n                    <p>Soarele apune : {props.sunset} </p>\r\n                    <p>Temp min : {props.tempMin} grd C </p>\r\n                    <p>Temp max : {props.tempMax} grd C </p>\r\n                    <p>Presiune : {props.pressure}  mb</p>\r\n                    <p>Indice UV : {props.uvi} uvi</p>\r\n                    <p>Viteza vant : {props.wind_speed} m/s</p>                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default forecast;\r\n","import React, { Component } from 'react';\r\nimport './WeatherPage.css';\r\nimport Header from './Header/Header';\r\nimport MapContainer from './MapGoogle/Map';\r\nimport WeatherCard from './CurrentWeatherCard/CurrentWeatherCard';\r\nimport Forecast from './Forecast/Forecast';\r\nimport axios from 'axios';\r\nimport shortid from 'shortid';\r\n\r\n\r\nclass WeatherPage extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      lat: this.props.lat,\r\n      lng: this.props.lng,\r\n      data: {\r\n        dt: '',\r\n        main: {\r\n          temp: '',\r\n          pressure: '',\r\n          humidity: '',\r\n        },\r\n        name: '',\r\n        sys: {\r\n          sunrise: '',\r\n          sunset: '',\r\n        },\r\n        timezone: '',\r\n        weather: {\r\n          description: '',\r\n          icon: '',\r\n          main: ''\r\n        }\r\n      },\r\n      forecast: [],\r\n    }\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    console.log('curr location', this.props.lat, this.props.lng)\r\n    this.getCurrentWeather(this.props.lat, this.props.lng);\r\n    this.getForecast(this.props.lat, this.props.lng);\r\n  }\r\n\r\n\r\n  componentDidUpdate = (prevProps) => {\r\n    console.log('componentDidUpdate---- this.state', this.props.lat)\r\n    console.log('componentDidUpdate', this.state.lat, '----', prevProps.lat)\r\n    if (this.props.lat !== prevProps.lat && this.props.lng !== prevProps.lng) {\r\n      this.getCurrentWeather(this.props.lat, this.props.lng);\r\n      this.getForecast(this.props.lat, this.props.lng);\r\n    }\r\n  }\r\n\r\n  timeConverter = (UNIX_timestamp) => {\r\n    let a = new Date(UNIX_timestamp * 1000);\r\n    let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    let year = a.getFullYear();\r\n    let month = months[a.getMonth()];\r\n    let date = a.getDate();\r\n    let hour = a.getHours();\r\n    let min = a.getMinutes();\r\n    let sec = a.getSeconds();\r\n    let time1 = date + ' ' + month + ' ' + year + ' ' + ' la ora ' + hour + ':' + min + ':' + sec;\r\n    let time2 = date + ' ' + month;\r\n    let time3 = ' la ora ' + hour + ':' + min + ':' + sec;\r\n    return {\r\n      timeDateMonthYearHour: time1,\r\n      timeDateMonth: time2,\r\n      timeHour: time3,\r\n    };\r\n  }\r\n\r\n  getCurrentWeather(currentLat, currentLon) {\r\n    const apiKey1 = `2ca9ca04865ce518fae4c576a4ef76ec`;\r\n    axios.get(` http://api.openweathermap.org/data/2.5/weather?lat=${currentLat}&lon=${currentLon}&units=metric&appid=${apiKey1} `).\r\n      then(response => {\r\n        this.setState({\r\n          lat: currentLat,\r\n          lng: currentLon,\r\n          data: {\r\n            dt: this.timeConverter(response.data.dt).timeDateMonthYearHour,\r\n            main: {\r\n              temp: response.data.main.temp,\r\n              pressure: response.data.main.pressure,\r\n              humidity: response.data.main.humidity,\r\n            },\r\n            name: response.data.name,\r\n            sys: {\r\n              sunrise: this.timeConverter(response.data.sys.sunrise).timeDateMonthYearHour,\r\n              sunset: this.timeConverter(response.data.sys.sunset).timeDateMonthYearHour,\r\n            },\r\n            timezone: response.data.timezone,\r\n            weather: {\r\n              description: response.data.weather[0].description,\r\n              icon: response.data.weather[0].icon,\r\n              main: response.data.weather[0].main\r\n            }\r\n          }\r\n\r\n        })\r\n      });\r\n  }\r\n\r\n  getForecast(currentLat, currentLon) {\r\n    const apiKey1 = `2ca9ca04865ce518fae4c576a4ef76ec`;\r\n    axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${currentLat}&lon=${currentLon}&units=metric&appid=${apiKey1}`).\r\n      then(responseF => {\r\n        this.setState({\r\n          forecast: responseF.data.daily\r\n        });\r\n      })\r\n  }\r\n\r\n  forecastCards = () => {\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.forecast.map((el, idx) => (\r\n          <Forecast\r\n            key={shortid.generate()}\r\n            name={this.timeConverter(el.dt).timeDateMonth}\r\n            clouds={el.clouds}\r\n            humidity={el.humidity}\r\n            pressure={el.pressure}\r\n            sunrise={this.timeConverter(el.sunrise).timeHour}\r\n            sunset={this.timeConverter(el.sunset).timeHour}\r\n            uvi={el.uvi}\r\n            wind_speed={el.wind_speed}\r\n            tempMin={el.temp.min}\r\n            tempMax={el.temp.max}\r\n            weather_description={el.weather[0].description}\r\n            weather_icon={el.weather[0].icon}\r\n          />\r\n        ))}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { name, main, sys, dt } = this.state.data;\r\n    const { humidity, temp, pressure } = main;\r\n    const { sunrise, sunset, } = sys;\r\n    return (\r\n      <div className=\"WeatherPage\">\r\n        <Header\r\n          name={this.state.data.name}\r\n        />\r\n        <div className=\"inputs\">\r\n          <label>Lat</label>\r\n          <input\r\n            value={this.state.newLat ? this.state.newLat : this.state.lat}\r\n            readOnly />\r\n          <label>Lng</label>\r\n          <input\r\n            value={this.state.newLng ? this.state.newLng : this.state.lng}\r\n            readOnly />\r\n        </div>\r\n\r\n        <MapContainer\r\n          defaultCenter={this.props.coords}\r\n          onchange={e => { this.props.functionMap(e) }}\r\n        />\r\n        <WeatherCard\r\n          umiditate={humidity}\r\n          rasarit={sunrise}\r\n          apus={sunset}\r\n          temp={temp}\r\n          presiune={pressure}\r\n          name={name}\r\n          timezone={dt}\r\n        />\r\n        <p className=\"prognoza\">Prognoza vremii in {this.state.data.name} pentru 8 zile  </p>\r\n        {this.forecastCards()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherPage;\r\n\r\n\r\n","import React, { Component } from 'react';\r\n/* import './App.css'; */\r\nimport WeatherPage from './Components/WeatherPage';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      lat: 0,\r\n      lng: 0,\r\n    }\r\n  }\r\n\r\n  takeCoordonatesFromMapClick = data => {\r\n    this.setState({\r\n      lat: parseFloat(data[0].trim()),\r\n      lng: parseFloat(data[1].trim())\r\n\r\n\r\n      /* newLat: data[0].trim(),\r\n      newLng: data[1].trim() */\r\n    });\r\n    console.log('parinte', this.state)\r\n  }\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(async position => {\r\n      this.coordinates = {\r\n        lat: position.coords.latitude,\r\n        lng: position.coords.longitude,\r\n      }\r\n      this.setState({\r\n        lat: position.coords.latitude,\r\n        lng: position.coords.longitude\r\n      });\r\n\r\n      console.log('curr location', this.state.lat, this.state.lng)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <WeatherPage\r\n        lat={this.state.lat}\r\n        lng={this.state.lng}\r\n        coords={this.coordinates}\r\n        functionMap={this.takeCoordonatesFromMapClick}\r\n      />\r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}